[ {
  "defaultTab" : "output",
  "description" : "Job para encerramento automático de INCs Elastic",
  "executionEnabled" : true,
  "group" : "servicenow/PRD",
  "id" : "2a089c03-5dd2-49c7-9a6f-9165140ef32c",
  "loglevel" : "INFO",
  "name" : "servicenow-automation-close-INC-PRD-new-instance",
  "nodeFilterEditable" : false,
  "nodefilters" : {
    "dispatch" : {
      "excludePrecedence" : true,
      "keepgoing" : false,
      "rankOrder" : "ascending",
      "successOnEmptyNodeFilter" : false,
      "threadcount" : "1"
    },
    "filter" : "name: ugbrsp3vlx250 "
  },
  "nodesSelectedByDefault" : true,
  "options" : [ {
    "hidden" : true,
    "name" : "query-servicenow",
    "secure" : true,
    "storagePath" : "keys/query_servicenow",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "query-sn",
    "secure" : true,
    "storagePath" : "keys/svc.ugelastic-p-new",
    "valueExposed" : true
  }, {
    "hidden" : true,
    "name" : "token_elastic_sn",
    "secure" : true,
    "storagePath" : "keys/svc.ugelastic-p-new",
    "valueExposed" : true
  } ],
  "plugins" : {
    "ExecutionLifecycle" : null
  },
  "schedule" : {
    "month" : "*",
    "time" : {
      "hour" : "*",
      "minute" : "*/10",
      "seconds" : "0"
    },
    "weekday" : {
      "day" : "*"
    },
    "year" : "*"
  },
  "scheduleEnabled" : true,
  "sequence" : {
    "commands" : [ {
      "description" : "Run API",
      "errorhandler" : {
        "fileExtension" : ".py",
        "interpreterArgsQuoted" : false,
        "keepgoingOnSuccess" : true,
        "script" : "print(\"ESSE ERRO COSTUMA OCORRER QUANDO NÃO HÁ MAIS NENHUM INC COM STATUS EM ABERTO PELO ELASTIC NO SERVICENOW\")",
        "scriptInterpreter" : "python3"
      },
      "fileExtension" : ".py",
      "interpreterArgsQuoted" : false,
      "plugins" : {
        "LogFilter" : [ {
          "config" : {
            "color" : "red",
            "replacement" : "[SECURE]"
          },
          "type" : "mask-passwords"
        } ]
      },
      "script" : "import requests\nimport http.client\nimport json\nimport re\nimport os\nimport pandas as pd\nimport numpy as np\nimport re\nimport logging\nimport base64\nimport sys\n\n# Dataframes\ndataServiceNow = pd.DataFrame()\ndataElastic = pd.DataFrame()\ndataIntegrated = pd.DataFrame()\n\n# SERVICENOW\n# Composição da URL de consulta dos INC no ServiceNow\n# essa URL tem a função de a partir da coluna caller_id procurar pelos usuários de serviço do elastic para fazer uma primeira filtragem na busca\nurlServiceNowPrd = \"https://gazprod.service-now.com/api/now/v1/table/incident?sysparm_query=caller_id=2970d391db496594103ca581149619d5^state=1&sysparm_fields=number,sys_id,short_description,category,opened_by,sys_updated_on,company,cmdb_ci,u_related_topdesk_number_record,correlation_id,state,opened_at&sysparm_limit=5000&sysparm_orderby=opened_at\"\n\nurlServiceNowCmdb = \"https://gazprod.service-now.com/api/now/v1/table/cmdb_ci?sysparm_query=companyLIKEUltragaz^ORnameSTARTSWITHug^operational_status=1&sysparm_fields=sys_id,name,operational_status&sysparm_limit=5000\"\nuserServiceNow = \"svc.ugelastic-p@grupoultracloud.onmicrosoft.com\"\nuserPassServiceNow = \"@option.query-sn@\"\n\n\n# ServiceNow Dev\nURL = \"https://gazprod.service-now.com/api/now/table/incident?\"\nqueryCallerId = \"sysparm_query=caller_id=2970d391db496594103ca581149619d5^\"\nstate = \"state=1\"\nfields = \"&sysparm_fields=number,sys_id,short_description,category,opened_by,sys_updated_on,company,cmdb_ci,u_related_topdesk_number_record,correlation_id,state,opened_at&sysparm_limit=5000&sysparm_orderby=opened_at\"\nurlServiceNow = URL+queryCallerId+state+fields\ntokensnow = \"c3ZjLnVnZWxhc3RpYy1wQGdydXBvdWx0cmFjbG91ZC5vbm1pY3Jvc29mdC5jb206ODExNUJIRWpteHE=\"\nsnowinstance = \"gazprod.service-now.com\"\napirunningsnow = \"/api/now/table/incident\"\napichecksnow =\"/api/now/table/incident?sysparm_query=u_related_topdesk_number_record=:\"\nstate1= \"&state=1\"\nstate2= \"&state=2\"\nstate3= \"&state=3\"\n\n# ELASTIC\nurlElastic = \"https://node133.ultragaz.com.br:5601/s/command-center/api/alerting/rules/_find\"\napiKeyElastic = \"QTlHU0RZa0J4N3VlYlVXcUM5dmc6RGJRbmgwWnNRekNiVFBFeUZWR21rQQ==\"\n\n# Função que pega todos os INC do ServiceNow\ndef get_servicenow_inc(urlServiceNowPrd, userServiceNow, userPassServiceNow):\n    dados = []\n    try:\n        r = requests.get(urlServiceNowPrd, auth=(userServiceNow, userPassServiceNow))\n        response = r.json()\n        \n        #print(f\"Resposta JSON do ServiceNow: {response}\")\n        if r.status_code != 200:\n             print(f\"Erro com status HTTP {r.status_code}\")\n             sys.exit(\"ESSE ERRO COSTUMA OCORRER QUANDO NÃO HÁ MAIS NENHUM INC COM STATUS EM ABERTO PELO ELASTIC NO SERVICENOW\")\n            \n            #print(f\"Resposta JSON do ServiceNow: {response}\")\n        else:\n            print(f\"Query ServiceNow OK! Status da resposta HTTP: {r.status_code}\")\n            for x in response['result']:\n                queryCorrelationId = x['correlation_id']\n        \n                if x['correlation_id'] == \"\":\n                       continue\n                else:\n                     # Split na variável queryCorrelationId para separar o id do ic \n                    correlationIdSplit = queryCorrelationId.split(':')\n                    alertId = correlationIdSplit[0]\n                      \n                    # Realiza o split em icImpacted com delimitador ','\n                    icImpacted_split = correlationIdSplit[1].split(',')\n        \n                    # Coleta o primeiro elemento após o split e força Uppercase\n                    icImpacted = icImpacted_split[0].upper()\n                        \n                    dadosTemp = {\n                    'INC': x['number'],\n                    'Sys Id': x['sys_id'],\n                    'Alert ID' : alertId,\n                    'IC Impacted' : icImpacted,\n                    'Status' : x['state']\n                    }\n                        \n                    dados.append(dadosTemp)\n\n        dataServiceNow = pd.DataFrame(dados)\n        return dataServiceNow\n    except Exception as e:\n        # Registrar a exceção no arquivo de log\n        logging.error(f\"Erro ao executar a requisição de dados do Service Now: {str(e)}\")\n        print(\"Falha ao executar a requisição de dados do Service Now !!!!\")\n        return None\n    finally:\n        r.close()\n    \n# Função que pega todos os alertas do Elastic\ndef get_elastic_alerts(urlElastic, apiKeyElastic):\n\n    headers = {\n        \"Authorization\": f\"ApiKey {apiKeyElastic}\"\n    }\n    \n    params = {\n        \"search_fields\": \"name\",\n        \"search\": \"*\",\n        \"per_page\": \"1000\"\n    }\n   \n    try:\n        getAlerts = requests.get(urlElastic, headers=headers, params=params)\n        alertsJson = getAlerts.json()\n\n        jsonStr = json.dumps(alertsJson, indent=4)\n        dataDict = json.loads(jsonStr)\n\n        data = dataDict.get(\"data\")  # Use .get() para lidar com a possibilidade de retorno None\n        if data is None:\n            raise Exception(\"Os dados do Elastic retornaram None.\")\n\n        columns = [\"id\", \"name\", \"status\", \"last_execution_date\", \"last_duration\", \"status_count\"]\n\n        dataElastic = pd.DataFrame(\n            [\n                {\n                    \"id\": d[\"id\"],\n                    \"name\": d[\"name\"],\n                    \"status\": d.get(\"execution_status\", {}).get(\"status\"),\n                    \"last_execution_date\": d.get(\"execution_status\", {}).get(\"last_execution_date\"),\n                    \"last_duration\": d.get(\"execution_status\", {}).get(\"last_duration\"),\n                    \"status_count\": d.get(\"last_run\", {}).get(\"alerts_count\", {}).get(\"active\")\n                }\n                for d in data\n            ],\n            columns=columns,\n        )\n        return dataElastic\n    except Exception as e:\n        # Registrar a exceção no arquivo de log\n        logging.error(f\"Erro ao executar a requisição de dados dos alertas do Elastic: {str(e)}\")\n        print(\"Falha ao executar a requisição de dados dos alertas do Elastic !!!!\")\n        return None\n    finally:\n        getAlerts.close()\n\n# Função que pega todos os IC do Service Now\ndef get_cmdb_ci(urlServiceNowCmdb, urlServiceNowPrd, userServiceNow):\n    dados = []\n    try:\n        r = requests.get(urlServiceNowCmdb, auth=(userServiceNow, userPassServiceNow))\n        response = r.json()\n\n        for x in response['result']:\n            dadosTemp = {\n            'Sys ID IC': x['sys_id'],\n            'Host Name': x['name'],\n            }\n            dados.append(dadosTemp)\n\n        dataServiceNowCmdb = pd.DataFrame(dados)\n        \n        return dataServiceNowCmdb\n    except Exception as e:\n        # Registrar a exceção no arquivo de log\n        logging.error(f\"Erro ao executar a requisição de dados do CMDB do Service Now: {str(e)}\")\n        print(\"Falha ao executar a requisição de dados do CMDB do Service Now !!!!\")\n        return None\n    finally:\n        r.close()\n    \n# função que que faz a correlação dos dados do dataframe do ServiceNow com o dataframe do Elastic\ndef integration_data(dataServiceNow, dataElastic, dataServiceNowCmdb):\n    \n    # Verificar se dataElastic é None\n    if dataElastic is None:\n        print(\"Erro: DataFrame dataElastic é None.\")\n        return None\n\n    dados = []\n    for incSearchServiceNow, sysIdSearchServiceNow, idSearchServiceNow, icSearchServiceNow, statusSearchServiceNow in zip(dataServiceNow['INC'], dataServiceNow['Sys Id'], dataServiceNow['Alert ID'], dataServiceNow['IC Impacted'], dataServiceNow['Status']):   \n        for idSearchElastic, status in zip(dataElastic['id'], dataElastic['status']):\n            if idSearchServiceNow == idSearchElastic:  \n                for cmdbId, cmdbHost in zip(dataServiceNowCmdb['Sys ID IC'], dataServiceNowCmdb['Host Name']):\n                    if cmdbHost.upper() in icSearchServiceNow.upper():           \n                        dadosTemp = {\n                            'INC': incSearchServiceNow,\n                            'Host ID' : cmdbId,\n                            'Sys Id': sysIdSearchServiceNow,\n                            'Alert ID' : idSearchServiceNow,\n                            'IC Impacted' : icSearchServiceNow,\n                            'Status' : statusSearchServiceNow,\n                            'Status Alert' : status\n                            }\n                        dados.append(dadosTemp)\n                    \n    df = pd.DataFrame(dados)\n\n    return df\n    \n# Função que coloca os INC em andamento no Service Now\ndef in_process_servicenow(dataIntegrated):\n\n    # Verificar se dataIntegrated é None\n    if dataIntegrated is None:\n        print(\"Erro: DataFrame dataIntegrated é None.\")\n        return\n   \n    #for sysID, status in zip(dataIntegrated['Sys Id'], dataIntegrated['Status Alert']):\n    #    if status == 'ok':\n            \n    for hostId, sysID, status in zip(dataIntegrated['Host ID'], dataIntegrated['Sys Id'], dataIntegrated['Status Alert']):\n        #if status == 'ok':\n        #print(hostId)\n        if status == 'ok' and hostId != '':        \n            snowurl= f'{apirunningsnow}'\n            id = f\"/{sysID}?sysparm_exclude_ref_link=true\"\n            url = f'{snowurl}{id}'\n            payloadrunningsnow = {\n            'state': '2',\n            'u_state': '2',\n            'comments':'alterado para em em andamento automaticamente',\n            'incident_state': '2',\n            \"caller_id\": \"2970d391db496594103ca581149619d5\"\n            }\n            json_payloadrunning = json.dumps(payloadrunningsnow)\n            headersrunningsnow = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization':  f'Basic {tokensnow}'\n            }\n            conn = http.client.HTTPSConnection(snowinstance)\n            conn.request(\"PATCH\", url, json_payloadrunning, headers=headersrunningsnow)\n            print(conn)\n            res = conn.getresponse()\n            data = res.read()\n            data = data.decode('ISO-8859-1')\n            result = re.findall(r'\"number\":\"[^\"]*\"', data)\n            print(f\"resposta da alteracao para em andamento numero do incidente {result} response code\", res.status)\n            print(result)\n\n        else:\n            print(\"Status ainda ativo!!!!\")\n \n# Função que coloca os INC como resolvidos no Service Now\ndef close_servicenow(dataIntegrated):\n    for hostId, sysID, status in zip(dataIntegrated['Host ID'], dataIntegrated['Sys Id'], dataIntegrated['Status Alert']):\n        if status == 'ok':\n            snowurl= f'{apirunningsnow}'\n            id = f\"/{sysID}?sysparm_exclude_ref_link=true\"\n            url = f'{snowurl}{id}'\n            payloadclosesnow = { \n            'state': '6',\n            'u_state': '6',\n            'incident_state': '6',\n            'close_code': 'Encerrado/Solucionado pelo solicitante',\n            'comments':'fechado automaticamente devido a normalizacao do alerta',\n            'u_service': 'Monitoração de Disponibilidade',\n            'u_resolution_classification': 'Restart de Serviços',\n            'u_prioritization_addon': 'Apenas comigo',\n            'u_choice_incident_principal': 'principal incidente',\n            'close_notes': 'Closed by Elastic',\n            'subcategory': 'Indisponibilidade',\n            'contact_type': 'phone',\n            'cmdb_ci': hostId\n            #'cmdb_ci': { 'link': 'https://ultradev.service-now.com/api/now/v1/table/cmdb_ci/hostId', 'value': 'hostId'}\n            #'business_service': { 'link': 'https://ultradev.service-now.com/api/now/v1/table/cmdb_ci_service/f6ba33b7db0cc25057ac9f3bf39619b6', 'value': 'f6ba33b7db0cc25057ac9f3bf39619b6'}\n                }\n            json_payloadrunning = json.dumps(payloadclosesnow)\n            headersrunningsnow = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization':  f'Basic {tokensnow}'\n            }\n            conn = http.client.HTTPSConnection(snowinstance)\n            conn.request(\"PATCH\", url, json_payloadrunning, headers=headersrunningsnow)\n            res = conn.getresponse()\n            data = res.read()\n            data = data.decode('ISO-8859-1')\n            result = re.findall(r'\"number\":\"[^\"]*\"', data)\n            print(f\"resposta da alteracao para solucionado numero do incidente {result} response code\", res.status)\n        else:\n            print(\"Status ainda ativo!!!!\")\n\n# Função de processamento e execução\ndef main_process(urlElastic, apiKeyElastic, urlServiceNowCmdb, urlServiceNowPrd, userServiceNow, userPassServiceNow, dataServiceNow, dataElastic, dataIntegrated):\n\n    # Buscando informações dos INCs e Alertas\n    dataServiceNow = get_servicenow_inc(urlServiceNowPrd, userServiceNow, userPassServiceNow)\n    print(dataServiceNow.head(5000))\n    dataElastic = get_elastic_alerts(urlElastic, apiKeyElastic)\n    print(dataElastic.head(5000))\n    dataServiceNowCmdb = get_cmdb_ci(urlServiceNowCmdb, urlServiceNowPrd, userServiceNow)\n    print(dataServiceNowCmdb.head(5000))\n    dataIntegrated = integration_data(dataServiceNow, dataElastic, dataServiceNowCmdb)\n    print(dataIntegrated.head(2000))\n\n    if dataIntegrated is not None:\n        in_process_servicenow(dataIntegrated)\n        close_servicenow(dataIntegrated)\n    else:\n        print(\"Erro: Não foi possível integrar os dados.\")\n    \n    if dataServiceNowCmdb is not None:\n        next\n    else:\n        print(\"Erro: Não foi possível obter os dados do CMDB do Service Now.\")\n    \n# Chamada função que gerencia o código\nmain_process(urlElastic, apiKeyElastic, urlServiceNowCmdb, urlServiceNow, userServiceNow, userPassServiceNow, dataServiceNow, dataElastic, dataIntegrated)\n\n\n\n",
      "scriptInterpreter" : "python3.6"
    } ],
    "keepgoing" : false,
    "strategy" : "node-first"
  },
  "timeZone" : "America/Sao_Paulo",
  "timeout" : "\"20m\"",
  "uuid" : "2a089c03-5dd2-49c7-9a6f-9165140ef32c"
} ]
